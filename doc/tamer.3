.TH TAMER 3 2007-04-30 Tamer "Tamer Manual"
.ds E \-\-\-
.if t .ds E \(em
.de M
.BR "\\$1" "(\\$2)\\$3"
..
.SH NAME
tamer \- C++ extensions for event-driven programming
.SH SYNOPSIS
.nf
.B #include <tamer/tamer.hh>
.B using namespace tamer;
.sp
\fBclass event<> { public:
    event();
    operator bool() const;
    bool empty() const;
    void trigger();
    void operator()();  \fR// synonym for \fBtrigger()
    void at_trigger(const event<>& \fItrigger_evt\fB);
}
\fR...\fB
\fBclass event<T0, T1, T2, T3> { public:
    event();
    operator bool() const;
    bool empty() const;
    void trigger(const T0& \fIv0\fB, const T1& \fIv1\fB,
                 const T2& \fIv2\fB, const T3& \fIv3\fB);
    void at_trigger(const event<>& \fItrigger_evt\fB);
}
.sp
class rendezvous<I> { public:
    rendezvous();
    event<> make_event(const I& \fIeid\fB);
    event<T0> make_event(const I& \fIeid\fB, T0& \fIs0\fB);
    event<T0, T1> make_event(const I& \fIeid\fB, T0& \fIs0\fB, T1& \fIs1\fB);
    event<T0, T1, T2> make_event(const I& \fIeid\fB,
                                 T0& \fIs0\fB, T1& \fIs1\fB, T2& \fIs2\fB);
    event<T0, T1, T2, T3> make_event(const I& \fIeid\fB,
                                     T0& \fIs0\fB, T1& \fIs1\fB, T2& \fIs2\fB, T3& \fIs3\fB);
    bool has_events() const;
    bool has_ready() const;
    bool has_waiting() const;
    bool join(I& \fIeid\fB);
}
.sp
class rendezvous<> { public:
    rendezvous();
    event<> make_event();
    event<T0> make_event(T0& \fIs0\fB);
    event<T0, T1> make_event(T0& \fIs0\fB, T1& \fIs1\fB);
    event<T0, T1, T2> make_event(T0& \fIs0\fB, T1& \fIs1\fB, T2& \fIs2\fB);
    event<T0, T1, T2, T3> make_event(T0& \fIs0\fB, T1& \fIs1\fB, T2& \fIs2\fB, T3& \fIs3\fB);
    bool has_events() const;
    bool has_ready() const;
    bool has_waiting() const;
    bool join();
}
.sp
tamed void user_function(...) {
    tvars { ... };
}
.sp
twait { ... }
twait volatile { ... }
.sp
twait(rendezvous<>& \fIrendezvous\fB);
twait(rendezvous<I>& \fIrendezvous\fB, I& \fIeid\fB);
.fi
.SH DESCRIPTION
.B Tamer
is a set of C++ language extensions and libraries that simplify the
practice of event-driven programming.
.LP
This manual page gives an overview of the
.B Tamer
abstractions, and describes the user-accessible
.B Tamer
methods and functions.  Most
.B Tamer
programs will also use the
.M tamer 1
preprocessor, which converts programs using
.B twait
into conventional C++.
'
.SH OVERVIEW
.B Tamer
introduces four related abstractions for handling concurrency:
.IR events ,
.IR "wait points" ,
.IR rendezvous ", and"
.IR "safe local variables" .
.LP
Each 
.B event 
object represents a future occurrence, such as the completion of a network
read.  When the occurrence actually happens\*Efor instance, a
packet arrives\*Ethe event is 
.I triggered
via its
.B trigger
method.  Each active event is associated with exactly one
.B rendezvous
object, which represents a set of related events.  A function can block
until some event on a
.B rendezvous
occurs using a
.B twait
special form.  For example, this function uses
.B Tamer
to print \*(lqDone!\*(rq after 10 seconds have elapsed.  During that 10 seconds,
the function blocks, allowing other application code to continue
processing.
.sp
.nf
.B "  tamed void f() {"
.B "      twait { tamer::at_delay_sec(10, make_event()); }"
.B "      printf(""Done!\en"");"
.B "  }"
.fi
.SS "Events"
.LP
To create an event, call the
.BI make_event
function of a
.B rendezvous
object.
.nf
.sp
\fB  rendezvous<> \fIr\fB;
  event<> \fIe\fB = \fIr\fB.make_event();\fR
.sp
.fi
The event's
.B trigger
method is called to indicate that the occurrence has happened.
Triggering an event can unblock other functions that were waiting for
the occurrence.
.nf
.sp
\fB  e.trigger();\fR
.sp
.fi
Events are associated with between zero and four
.IR results ,
which pass information from trigger points back to blocked functions.
For example, a result could indicate whether a network connection
attempt succeeded or timed out. The
.B make_event
function takes references to results; the
.B trigger
method takes values to which the results are set. The types of an
event's results are given by its template arguments. For example:
.nf
.sp
\fB  rendezvous<> \fIr\fB;  int \fIi\fB = 0;
  event<int> \fIe\fB = \fIr\fB.make_event(\fIi\fB);
  \fIe\fB.trigger(100);
  assert(\fIi\fB == 100);               // \fRassertion will succeed
.sp
.fi
Here, we see that the trigger value
.B 100
is passed through to the result
.BR i .
The type of
.I i
is echoed in
.IR e 's
type
.BR event<int> .
.LP
.B event
objects may be freely assigned, passed as arguments, and copied. They
are automatically reference counted. Each
.B event
may be triggered at most once.  An event that hasn't triggered yet is called
.IR active .
Triggering an active event makes it
.IR empty ;
triggering an empty event has no effect.
.LP
Tamer automatically triggers an active event when its last reference goes
out of scope.  This case is considered a programming error, however, and an
\*(lqdropping last reference\*(rq message is printed to standard error.
Explicitly calling
.B rendezvous::clear
on the event's rendezvous will avoid the message, as will using a volatile
rendezvous.
'
.SS "Wait Points and Rendezvous"
.LP
The
.B wait point
language extension, written
.BR twait ,
.I blocks
the calling function until one or more events are triggered. A blocked
function returns to its caller, but does not actually complete. The
function's safe local variables and blocking point are preserved in a
closure. Later, the function can \*(lqunblock\*(rq and resume
execution. By that time, of course, the function's original caller may
have returned. Any function containing a wait point is marked with the
.B tamed
keyword, which informs the caller that the function can block.
.LP
The first, and more common, form of wait point is written
\*(lq\fBtwait\~{ \fIstatements\fB; }\fR\*(rq.
This executes
.IR statements ,
then blocks until
.I all
events created in
.I statements
have triggered.  (Within
.IR statements ,
.B make_event
is redefined to a macro that automatically supplies a
.B rendezvous
argument.)
For example, code like \*(lq\fBtwait { tamer::at_delay_sec(\fR10\fB, make_event()); }\fR\*(rq
should be read as \*(lqexecute \fBtamer::at_delay_sec(\fR10\fB, make_event())\fR,
then block until the created event has triggered\*(rq\*Eor,
since
.B tamer::at_delay_sec
triggers its event argument after the given number of seconds has passed, simply as \*(lqblock for 10 seconds\*(rq.
.LP
The second form of wait point explicitly names a
.B rendezvous
object. A wait point
.B twait(\fIr\fB)
unblocks when
.I any
of
.B rendezvous<>
.IR r 's
events occurs.  Unblocking consumes the event and restarts the blocked
function.
.\" The first form of wait point is actually syntactic sugar for
.\" the second: code like \*(lq\fBtwait\~{ \fIstatements\fB; }\fR\*(rq
.\" expands into something like
.\" .nf
.\" .sp
.\" \fB  rendezvous<> \fI__r\fB;
.\"   \fIstatements\fB;      // \fRwhere \fBmake_event\fR calls create events on \fI__r\fB
.\"   while (\fI__r\fB.has_events())
.\"       twait(\fI__r\fB);\fR
.\" .sp
.\" .fi
The 
.B twait()
form can also return information about
.I which
event occurred.  A rendezvous of type
.BR rendezvous<I>
associates an
.I event ID
of type
.BR I
with each event.  The
.B make_event
function specifies the event ID as well as results.  A 
.B twait(\fIr\fB, \fIeid\fB)
statement sets the variable
.I eid
to the ID of the unblocking event.  The type of
.I eid
must match the type of the
.BR rendezvous .
.LP
.B rendezvous
objects have private copy constructors and assignment operators, preventing
them from being copied.
.LP
A
.B tamed
function's caller resumes when the called function
.IR "either returns or blocks" .
A
.B tamed
function will often accept an
.B event
argument, which it triggers when it completes its processing.
This lets the caller block until the function completes.
Here is a
.B tamed
function that blocks, then returns an integer:
.nf
.sp
  \fBtamed void blockf(event<int> \fIdone\fB) {
      \&\fR... block ...\fB
      done.trigger(\fR200\fB);
  }\fR
.sp
.fi
A caller will most likely use
.B twait
to wait for
.B blockf
to return, and so become
.B tamed
itself.
Waiting for events thus trickles up the call stack until a caller
doesn't care whether its callee returns or blocks.
.LP
When an event
.I e
is triggered, 
.B Tamer
enqueues a
.I trigger notification
for 
.IR e 's
event ID on
.IR e 's
rendezvous
.IR r .
This step also unblocks any function blocked on
.BR twait(\fIr\fB) .
Conversely,
.B twait(\fIr\fB)
checks for any queued trigger notifications
.IR r .
If one exists, it is dequeued and returned.  Otherwise, the function blocks
at that wait point; it will unblock and recheck the rendezvous once someone
triggers a corresponding event.  The top-level event loop cycles through
unblocked functions, calling them in some order.
.LP
Multiple functions cannot simultaneously block on the same rendezvous.
.SS "Safe Local Variables"
.LP
Finally, 
.B safe local variables
are variables whose values are preserved across wait points.  The
programmer marks local variables as safe by enclosing them in a
.B tvars{}
block, which preserves their values in a heap-allocated closure.  Function
parameters are always safe.  Unsafe local variables have indeterminate
values after a wait point.  The C++ compiler will often give you an
uninitialized-variable warning when a variable needs to be made safe.
'
.SH EVENT CLASS
The
.B event
template class represents future occurrences.  The template takes zero to
four type arguments, which represent the types of the
.BR event 's
results.  In the following,
.Br T0-T3 " or " Ts
are the template arguments of the
.B event
type.  These type arguments must be copy-constructible and
assignable.
.sp
.nf
.B event<Ts>::event()
.fi
.RS 5
Creates an empty event.  Trigger attempts on the event are ignored;
.B \fIe\fB.empty()
returns true.
.RE
.sp
.nf
.B event<Ts>::event(const event<Ts>& \fIe\fR)
.B event<Ts>& event<Ts>::operator=(const event<Ts>& \fIe\fR)
.fi
.RS 5
Events may be safely copied and assigned.  After an assignment
\fIe1\fB\~=\~\fIe2\fR, the event objects
.IR e1 " and " e2
refer to the same underlying occurrence. Triggering either
causes both to become empty.
.RE
.sp
.nf
.B event<Ts>::operator bool() const
.fi
.RS 5
Returns true if the event is active.  Empty events return false.
.RE
.sp
.nf
.B bool event<Ts>::empty() const
.fi
.RS 5
Returns true if the event is empty, meaning it was created empty or has
already been triggered.  \*(lq\fIe\fB.empty()\fR\*(rq is equivalent to
\*(lq\fB!(bool)\fIe\fR\*(rq.
.RE
.sp
.nf
.B void event<T0, T1, T2, T3>::trigger(const T0& \fIv0\fB, const T1& \fIv1\fB,
.B "                                    const T2& \fIv2\fB, const T3& \fIv3\fB)"
.B ... void event<>::trigger()
.fi
.RS 5
Triggers the event.  If the event is empty, this does nothing; otherwise,
it sets the event's results (defined at creation time) to the
trigger values
.IR v0 ... v3
and wakes any blocked closure.  Events become empty after
they are triggered.
.RE
.sp
.nf
.B void event<Ts>::at_trigger(const event<>& \fItrigger_evt\fB)
.fi
.RS 5
Registers
.I trigger_evt
for cancel notification.  If this event is already empty,
.I trigger_evt
is triggered immediately.  Otherwise,
.I trigger_evt
is triggered when this event is triggered.
.RE
.sp
.nf
.B event<> event<Ts>::unblocker() const
.fi
.RS 5
Returns a version of this event that has no results.  The returned
event refers to the same occurrence as this event, so triggering either
event makes both events appear empty.  However,
.B unblocker().trigger()
will leave this event's results unchanged.
.RE
'
.SH "RENDEZVOUS CLASS"
The
.B rendezvous
template class groups related events.  The template takes an optional
type argument, which is the type of the
.BR rendezvous 's
event IDs.  In the following,
.BR I
is the template argument of the
.B rendezvous
type.  If it is given,
.B I
objects must be copy-constructible and assignable.
.sp
.nf
.B rendezvous<I>::rendezvous()
.fi
.RS 5
Creates a new rendezvous with no outstanding events.
.RE
.sp
.nf
.B bool rendezvous<I>::has_events() const
.fi
.RS 5
Tests if there are any outstanding events.  This includes events that have
not yet triggered, and events that have triggered, but the trigger
notification has not been collected yet.
.RE
.sp
.nf
.B bool rendezvous<I>::has_ready() const
.fi
.RS 5
Tests if there are any ready events.  An event is ready if it has been
triggered, but the trigger notification has not been collected yet.  The
.B rendezvous<I>::join
method will return true only if
.B has_ready()
is true.
.RE
.sp
.B bool rendezvous<I>::has_waiting() const
.fi
.RS 5
Tests if there are any waiting events.  An event is waiting if it has not yet
triggered.
.RE
.sp
.nf
.B bool rendezvous<I>::join(I& \fIeid\fB)
.B bool rendezvous<>::join()
.fi
.RS 5
Collects a trigger notification, if any events have triggered but have not
yet been collected.  If a trigger notification is available, sets the event
ID argument
.IR eid ,
if any, to the collected event's ID and returns true.  Otherwise,
returns false.  The
.B twait
special forms are built around calls to
.BR rendezvous<I>::join .
.RE
.sp
.nf
.B void rendezvous<I>::clear()
.fi
.RS 5
Removes all pending events from this rendezvous.  Any active events on this
rendezvous are effectively triggered, calling their
.B at_trigger()
notifiers and making the events themselves empty.  After
.BR clear() ,
the rendezvous's
.B has_events()
method returns false.
.RE
'
.SH "EVENT MODIFIERS"
These functions manipulate events generically, for example by returning
one event that triggers two others.
.sp
.nf
.B event<> operator+(const event<>& \fIe1\fB, const event<>& \fIe2\fB)
.fi
.RS 5
Returns an event that combines
.IR e1 " and " e2 .
Triggering the returned event will trigger both
.IR e1 " and " e2 .
The returned event is empty if and only if both
.IR e1 " and " e2
are empty.
.BI tamer::all( e1 ", " e2 )
is a synonym for operator+.
.RE
.sp
.nf
.B event<> bind(const event<T0>& \fIe\fB, const T0& \fIv0\fB)
.fi
.RS 5
Returns an event that, when triggered, will call
.BR \fIe\fB.trigger(\fIv0\fB) .
.RE
.sp
.nf
.B event<T0> rebind(const event<>& \fIe\fB)
.fi
.RS 5
Returns an event that, when triggered, will call
.BR \fIe\fB.trigger() .
The returned event's trigger value is ignored.
.RE
'
.SH "DRIVER"
The
.B driver
class handles
.BR Tamer 's
fundamental events: timers, signals, and file descriptors.  Most programs
will use the single
.B driver::main
object, which is accessed through top-level functions as follows.
.sp
.nf
.B void at_fd_read(int \fIfd\fB, event<int> \fIe\fB)
.B void at_fd_read(int \fIfd\fB, event<> \fIe\fB)
.fi
.RS 5
Triggers
.I e
when
.I fd
becomes readable, or when
.I fd
is closed or encounters an error, whichever comes first.
.I fd
must be a valid file descriptor less than
.BR FD_SETSIZE .
In the version taking
.BR event<int> ,
the trigger value is 0 when
.I fd
becomes readable, and a negative error code otherwise.
.RE
.sp
.nf
.B void at_fd_write(int \fIfd\fB, event<int> \fIe\fB)
.B void at_fd_write(int \fIfd\fB, event<> \fIe\fB)
.fi
.RS 5
Triggers event
.I e
when
.I fd
becomes writable.
.I fd
must be a valid file descriptor less than
.BR FD_SETSIZE .
The trigger value is as for
.BR at_fd_read() .
.RE
.sp
.nf
.B void at_time(const timeval& \fIexpiry\fB, event<> \fIe\fB)
.fi
.RS 5
Triggers event
.I e
on, or soon after, time
.IR expiry .
.RE
.sp
.nf
.B void at_delay(const timeval& \fIdelay\fB, event<> \fIe\fB)
.fi
.RS 5
Triggers event
.I e
after at least
.I delay
time has passed.  All delays are measured relative to the timestamp
.BR now() .
.RE
.sp
.nf
.B void at_delay(double \fIdelay\fB, event<> \fIe\fB)
.fi
.RS 5
Triggers event
.I e
after at least
.I delay
seconds have passed.
.RE
.sp
.nf
.B void at_delay_sec(int \fIdelay\fB, event<> \fIe\fB)
.fi
.RS 5
Triggers event
.I e
after at least
.I delay
seconds have passed.
.RE
.sp
.nf
.B void at_delay_msec(int \fIdelay\fB, event<> \fIe\fB)
.fi
.RS 5
Triggers event
.I e
after at least
.I delay
milliseconds have passed.
.RE
.sp
.nf
.B void at_signal(int \fIsignal\fB, event<> \fIe\fB)
.fi
.RS 5
Triggers event
.I e
if the
.I signal
occurs.  The event is not triggered directly inside the signal handler.
Rather, the signal handler marks the signal's occurrence, then blocks the
signal from further delivery.  The signal remains blocked at least until
.IR e
has been triggered and any corresponding closure has run (and possibly
registered another event to catch the signal).  Thus, programmers can
safely catch signals without race conditions.
.RE
.sp
.nf
.B void at_asap(event<> \fIe\fB)
.fi
.RS 5
Triggers event
.I e
on the next execution of
.BR Tamer 's
main loop.
.RE
.sp
.nf
.B const timeval& now()
.fi
.RS 5
Returns the current cached timestamp.
.RE
.sp
.nf
.B void once()
.fi
.RS 5
Runs through the driver's event loop once.  First, the driver removes any
empty timer and file descriptor events.  Then, the driver calls
.BR select
and possibly blocks, waiting for the next event.  Then, the driver triggers
and runs the appropriate signal events, file descriptor events, timer
events, and ASAP events.  Each path through the event loop resets
.B now()
to the correct current value.
.RE
.sp
.nf
.B void loop()
.fi
.RS 5
Equivalent to \*(lq\fBwhile (true) once();\fR\*(rq.
.RE
.sp
.nf
.B void break_loop()
.fi
.RS 5
Causes any active call to
.B loop()
to return.
'
.SH "CANCEL ADAPTERS"
These functions integrate timeouts, signals, and other forms of cancellation
into existing events.  For example:
.sp
.nf
  \fBint \fIi\fB;  rendezvous<> \fIr\fB;
  event<int> \fIe\fB = add_timeout(\fIdelay\fB, \fIr\fB.make_event(\fIi\fB), \-ETIMEDOUT);\fR
.fi
.sp
The event on
.I r
is triggered on the first of the following events.
.IP \(bu 3
.I e
is triggered.
.I i
is set to
.IR e 's
trigger value.
.IP \(bu 3
.I delay
seconds elapse.
.I i
is set to
.BR \-ETIMEDOUT .
.LP
Cancel adapters are available for timeouts and signals.
.sp
.nf
.B event<T> add_timeout(const timeval& \fIdelay\fB, event<T> \fIe\fB, const V& \fIv\fB)
.B event<T> add_timeout_sec(int \fIdelay\fB, event<T> \fIe\fB, const V& \fIv\fB)
.B event<T> add_timeout_msec(int \fIdelay\fB, event<T> \fIe\fB, const V& \fIv\fB)
.fi
.RS 5
Adds a timeout to
.IR e .
If the
.I delay
expires before
.I e
is triggered normally, then
.I e
is triggered with value
.IR v .
Returns
.IR e .
.RE
.sp
.nf
.B event<T> add_signal(int \fIsignal\fB, event<T> \fIe\fB, const V& \fIv\fB)
.B event<T> add_signal(ITER \fIfirst\fB, ITER \fIlast\fB, event<T> \fIe\fB, const V& \fIv\fB)
.fi
.RS 5
Adds signal detection to
.IR e .
If the
.I signal
(or one of the signals in the iterator range
.RI [ first ", " last ))
happens before
.I e
triggers normally, then
.I e
is triggered with value
.IR v .
Returns
.IR e .
.RE
.PP
There is also a set of cancel adapters that don't set
.IR e 's
trigger value.  For example:
.sp
.nf
  \fBint \fIi(-1)\fB;  rendezvous<> \fIr\fB;
  event<int> \fIe\fB = with_timeout(\fIdelay\fB, \fIr\fB.make_event(\fIi\fB));\fR
.fi
.sp
The event on
.I r
is triggered on the first of the following occurrences:
.IP \(bu 3
.I e
is triggered.
.I i
is set to
.IR e 's
trigger value.
.IP \(bu 3
.I delay
seconds elapse.
.I i
retains its initial value.
.RE
.sp
.nf
.B event<Ts> with_timeout(const timeval& \fIdelay\fB, event<Ts> \fIe\fB)
.B event<Ts> with_timeout_sec(int \fIdelay\fB, event<Ts> \fIe\fB)
.B event<Ts> with_timeout_msec(int \fIdelay\fB, event<Ts> \fIe\fB)
.B event<Ts> with_signal(int \fIsignal\fB, event<Ts> \fIe\fB)
.B event<Ts> with_signal(ITER \fIfirst\fB, ITER \fIlast\fB, event<Ts> \fIe\fB)
.fi
.RS 5
Return cancel-adapted versions of
.IR e .
These functions are analogous to the
.B add_
versions above, but do not set any trigger values to indicate whether the
event triggered successfully.
.RE
.sp
.nf
.B event<Ts> with_timeout(const timeval& \fIdelay\fB, event<Ts> \fIe\fB, int& \fIresult\fB)
.B event<Ts> with_timeout_sec(int \fIdelay\fB, event<Ts> \fIe\fB, int& \fIresult\fB)
.B event<Ts> with_timeout_msec(int \fIdelay\fB, event<Ts> \fIe\fB, int& \fIresult\fB)
.B event<Ts> with_signal(int \fIsignal\fB, event<Ts> \fIe\fB, int& \fIresult\fB)
.B event<Ts> with_signal(ITER \fIfirst\fB, ITER \fIlast\fB, event<Ts> \fIe\fB,
.B "                      int& \fIresult\fB)"
.fi
.RS 5
Return cancel-adapted versions of
.IR e .
When
.I e
triggers, the
.I result
variable is set to one of the following constants to indicate why:
.RS 2
.IP "\fB0\fR" 15
if
.I e
triggered successfully.
.IP "\fB\-ETIMEDOUT\fR" 15
if
.I e
timed out.
.IP "\fB\-EINTR\fR" 15
if
.I e
was interrupted by a signal.
.RE
.LP
The constants
.BR tamer::outcome:: { success ,
.BR timeout ,
.BR signal }
may be used instead of the error values.
.RE
'
.SH "FILE I/O"
.BR Tamer 's
support for file I/O is available via
.BR "#include <tamer/fd.hh>" .
Variants of the main I/O system calls are provided, most of them
nonblocking.  See
.M tamer_fd 3 .
'
.SH BUGS
The existing
.B fd
wrappers are only truly nonblocking for pipe, socket, and network I/O.  The
functions will block on disk I/O.
.LP
The
.B Tamer
interface differs in several ways from the interface described in
\*(lqEvents Can Make Sense\*(rq by Krohn et al.  First, all
.B Tamer
classes and functions are declared in the
.B tamer
namespace.  
.RB \*(lq "using namespace tamer;" \*(rq
will bring them into the global namespace.
Second,
.B Tamer
events are created with
.BR make_event
(rather than
.BR mkevent ),
which more closely follows the C++ standard library's style.  Third,
.B Tamer
primitive events are registered with functions
.BR at_time ,
.BR at_fd_read ,
and
.BR at_fd_write
rather than
.BR timer
and
.BR wait_on_fd ;
the
.B at_
convention will generalize better to future classes of events.  Finally,
.B tamed
functions in
.B Tamer
are declared using code like \*(lq\fBtamed void f()\fR\*(rq, not
\*(lq\fBtamed f()\fR\*(rq.
.LP
The
.B Tamer
interface also differs substantially from that of
.BR Tame ,
which is distributed as part of
.BR sfslite .
'
.SH AUTHOR
Eddie Kohler <kohler@seas.harvard.edu>
.br
Based on joint work on Tame with Maxwell Krohn <krohn@mit.edu> and Frans
Kaashoek <kaashoek@mit.edu>
'
.SH "SEE ALSO"
.M tamer 1 ,
.M tamer_fd 3
.LP
\*(lqEvents Can Make Sense\*(rq.  Maxwell Krohn, Eddie Kohler, and Frans
Kaashoek.  In
.I Proc. USENIX 2007 Annual Technical Conference.
Also available at
http://read.seas.harvard.edu/~kohler/pubs/krohn07events.pdf
.LP
The SFSlite libraries for writing asynchronous programs include the
original
.B Tame
processor and libraries.  The SFSlite libraries are larger and more
full-featured than
.BR Tamer ,
but also harder to use.  SFSlite is available at
http://www.okws.org/doku.php?id=sfslite
